const CACHE_NAME="dicoding-story-app-v2",LOCAL_ASSETS_TO_CACHE=["/dicoding-story-app/","/dicoding-story-app/index.html","/dicoding-story-app/app.bundle.js","/dicoding-story-app/app.css","/dicoding-story-app/manifest.json","/dicoding-story-app/favicon.png","/dicoding-story-app/images/logo.png"],CDN_ASSETS_TO_CACHE=[],API_BASE_URL="https://story-api.dicoding.dev/v1";self.addEventListener("install",(e=>{console.log(`Service Worker (${CACHE_NAME}): Installing...`),e.waitUntil(caches.open(CACHE_NAME).then((async e=>{console.log(`Service Worker (${CACHE_NAME}): Caching local App Shell...`);let t=!0;try{await e.addAll(LOCAL_ASSETS_TO_CACHE),console.log(`Service Worker (${CACHE_NAME}): Local assets cached successfully.`)}catch(o){console.warn(`Service Worker (${CACHE_NAME}): cache.addAll for local assets failed, trying individually. Error:`,o),t=!1;for(const o of LOCAL_ASSETS_TO_CACHE)try{await e.add(o)}catch(e){console.error(`Service Worker (${CACHE_NAME}): Failed to cache local asset: ${o}`,e),t=!1}t&&console.log(`Service Worker (${CACHE_NAME}): All local assets cached successfully via individual add.`)}if(CDN_ASSETS_TO_CACHE.length>0){console.log(`Service Worker (${CACHE_NAME}): Attempting to cache CDN App Shell...`);for(const t of CDN_ASSETS_TO_CACHE)try{const o=new Request(t,{mode:"no-cors"}),s=await fetch(o);s&&await e.put(o,s.clone())}catch(e){console.warn(`Service Worker (${CACHE_NAME}): Failed to pre-cache CDN asset: ${t}. Error: ${e.message}`)}console.log(`Service Worker (${CACHE_NAME}): CDN App Shell assets caching attempt finished.`)}else console.log(`Service Worker (${CACHE_NAME}): No CDN assets to pre-cache during install.`)})).then((()=>(console.log(`Service Worker (${CACHE_NAME}): Install phase finished, skipping waiting.`),self.skipWaiting()))).catch((e=>{console.error(`Service Worker (${CACHE_NAME}): Critical error during install phase:`,e)})))})),self.addEventListener("activate",(e=>{console.log(`Service Worker (${CACHE_NAME}): Activating...`),e.waitUntil(caches.keys().then((e=>Promise.all(e.map((e=>e!==CACHE_NAME?(console.log(`Service Worker (${CACHE_NAME}): Deleting old cache: ${e}`),caches.delete(e)):null))))).then((()=>(console.log(`Service Worker (${CACHE_NAME}): Activated and old caches cleaned.`),self.clients.claim()))))})),self.addEventListener("fetch",(e=>{(e.request.url.startsWith("http:")||e.request.url.startsWith("https:"))&&"GET"===e.request.method&&(e.request.url.startsWith(API_BASE_URL)?e.respondWith(fetch(e.request).then((t=>{if(t&&200===t.status){const o=t.clone();caches.open(CACHE_NAME).then((t=>{t.put(e.request,o)}))}return t})).catch((async()=>await caches.match(e.request)||new Response(JSON.stringify({error:!0,message:"Offline dan data tidak tersedia di cache."}),{headers:{"Content-Type":"application/json"},status:503,statusText:"Service Unavailable (Offline)"})))):e.respondWith(caches.match(e.request).then((t=>t||fetch(e.request).then((t=>{if(t&&200===t.status&&(e.request.url.startsWith("http:")||e.request.url.startsWith("https:"))){const o=t.clone();caches.open(CACHE_NAME).then((t=>{t.put(e.request,o)}))}return t})))).catch((async t=>{if(console.warn(`SW: Fetch failed for ${e.request.url}, Error: ${t.message}`),"navigate"===e.request.mode&&"document"===e.request.destination){const e=await caches.match("/index.html");if(e)return e}throw t}))))})),self.addEventListener("push",(e=>{let t={title:"Notifikasi Baru Dicoding Story",options:{body:"Ada cerita baru untukmu!",icon:"/images/logo-192x192.png"}};if(e.data)try{const o=e.data.json();t.title=o.title||t.title,o.options&&(t.options.body=o.options.body||t.options.body,t.options.icon=o.options.icon||"/images/logo-192x192.png")}catch(e){}e.waitUntil(self.registration.showNotification(t.title,t.options))})),self.addEventListener("notificationclick",(e=>{e.notification.close(),e.waitUntil(clients.matchAll({type:"window",includeUncontrolled:!0}).then((e=>{const t=e.find((e=>e.focused));return t?t.navigate("/").then((e=>e.focus())):e.length>0?e[0].navigate("/").then((e=>e.focus())):clients.openWindow("/")})))}));